//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Orders_Engine_module_2.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web.Mvc;

    public partial class Customer
    {
        string name;
        List<SelectListItem> list;
        public int CustomerID { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Do not enter numbers")]
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set;}

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "Middle name is required")]
        public string MiddleName { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "Company name is required")]
        public string Company { get; set; }

        [RegularExpression(@"^[0-9]{0,15}$", ErrorMessage = "CustomerTypeID should contain only numbers")]
        [Required(ErrorMessage = "CustomerTypeID is required")]
        public int CustomerTypeID { get; set; }

        [RegularExpression(@"^[0-9]{0,15}$", ErrorMessage = "CustomerStatusID should contain only numbers")]
        [Required]
        public int CustomerStatusID { get; set; }

        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [DataType(DataType.PhoneNumber)]
        [Required(ErrorMessage = "Phone is required")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "MainAddress1 is required")]
        public string MainAddress1 { get; set; }

        [Required(ErrorMessage = "MainAddress2 is required")]
        public string MainAddress2 { get; set; }

        [Required(ErrorMessage = "MainAddress3 is required")]
        public string MainAddress3 { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MainCity is required")]
        public string MainCity { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MainState is required")]
        public string MainState { get; set; }

        [RegularExpression(@"^[0-9]{0,15}$", ErrorMessage = "MainZip should contain only numbers")]
        [Required(ErrorMessage = "MainZip is required")]
        public string MainZip { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MainCountry is required")]
        public string MainCountry { get; set; }

        [Required(ErrorMessage = "MailAddress1 is required")]
        public string MailAddress1 { get; set; }

        [Required(ErrorMessage = "MailAddress2 is required")]
        public string MailAddress2 { get; set; }

        [Required(ErrorMessage = "MailAddress3 is required")]
        public string MailAddress3 { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MailCity is required")]
        public string MailCity { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MailState is required")]
        public string MailState { get; set; }

        [RegularExpression(@"^[0-9]{0,15}$", ErrorMessage = "MailZip should contain only numbers")]
        [Required(ErrorMessage = "MailZip is required")]
        public string MailZip { get; set; }

        [RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        [Required(ErrorMessage = "MailCountry is required")]
        public string MailCountry { get; set; }

        [Required(ErrorMessage = "CanLogin is required")]
        public bool CanLogin { get; set; }

        //[RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        public string LoginName {
            get { return name; }
            set { name = FirstName; }
        }

        [DataType(DataType.DateTime)]
        [Required(ErrorMessage = "BirthDate is required")]
        public System.DateTime BirthDate { get; set; }

        [Required(ErrorMessage = "CurrencyCode is required")]
        public string CurrencyCode { get; set; }
     
        public Nullable<int> LanguageID { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; }
        public IEnumerable<SelectListItem> GenderList
        { get
            { 
        
                    list = new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "Select" }, new SelectListItem() { Text = "Male", Value = "Male" }, new SelectListItem() { Text = "Female", Value = "Female" } };
                    return list.Select(l => new SelectListItem { Selected = (l.Value == Gender), Text = l.Text, Value = l.Value });
            }
            set {  }
        }
        [Required]
        public string TaxCode { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Please enter valid integer Number")]
        [RegularExpression(@"^[0-9]{0,15}$", ErrorMessage = "TaxCodeTypeID should contain only numbers")]
        [Required(ErrorMessage = "TaxCodeTypeID is required")]
        public int TaxCodeTypeID { get; set; }

        [Required(ErrorMessage = "IsSalesTaxExempt is required")]
        public bool IsSalesTaxExempt { get; set; }
     
        public string SalesTaxCode { get; set; }
        public Nullable<bool> IsEmailSubscribed { get; set; }
        public string Notes { get; set; }

        [DataType(DataType.DateTime)]
        [Required(ErrorMessage = "CreatedDate is required")]
        public System.DateTime CreatedDate { get { return DateTime.Now; } set { } }

        [DataType(DataType.DateTime)]
        [Required(ErrorMessage = "ModifiedDate is required")]
        public System.DateTime ModifiedDate { get { return DateTime.Now; } set { } }

        //[RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        //[Required(ErrorMessage = "CreatedBy is required")]
        public string CreatedBy { get { return name;}
                                  set { name = FirstName; }
        }

        //[RegularExpression(@"^[a-zA-Z]*$", ErrorMessage = "Enter only alphabets")]
        //[Required(ErrorMessage = "ModifiedBy  is required")]
        public string ModifiedBy {get { return name; }set { name = FirstName; }
        }
    }

}
